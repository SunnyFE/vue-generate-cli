#!/usr/bin/env node

var program = require('commander');
const chalk = require('chalk');
const ora = require('ora');
const spinnerstyle = require('../libs/spinners.json');
const path = require('path');
const fs = require('fs');

program
  .option('-C, --CSS', 'Add CSS file')
  .option('-P, --PascalCase', 'Add PascalCase')

const spinner = ora({
  text: chalk.blue('generate template begin'),
  spinner: spinnerstyle.dots
});

program.on('--help', function() {
  console.log('  Examples:');
  console.log('');
  console.log('    $ vue-g g --help');
  console.log('    $ vue-g g -h');
  console.log('');
  console.log(chalk.gray('    # create a new my-component.vue file with an template in components directory'));
  console.log('    $ vue-g g my-component');
  console.log(chalk.gray('    # create a new my-component.vue file with an template in libs directory'));
  console.log('    $ vue-g g libs my-component');
  console.log(chalk.gray('    # create more new my-component01.vue, my-component02.vue and my-component03.vue files with an template in libs directory'));
  console.log('    $ vue-g g libs my-component01 my-component02 my-component03');
  console.log(chalk.gray('    # create more new my-component01.vue, my-component02.vue and my-component03.vue files with an template in ./components/libs directory'));
  console.log('    $ vue-g g ./components/libs my-component01 my-component02 my-component03');
  console.log('');
});

program.parse(process.argv);

/**
 * Help
 */
(function help () {
  if (program.args.length < 1) return program.help();
})()

/**
 * Generate
 */
console.log(program.PascalCase);
const suffix = '.vue';
const baseDir = './src';
const basePath = path.join(process.cwd(), baseDir);

console.log('');
spinner.start('Generating, please wait......');
console.log('');

checkBasePathIsexists(basePath, baseDir);

// check basepath
function checkBasePathIsexists(currentPath, currentDir) {
  if (fs.existsSync(currentPath)) {
    generate();
  } else {
    spinner.fail(chalk.red(currentDir + ' directory does not exist'));
  }
}

// check path
function checkPathIsexists(currentDir, filename) {
  let currentPath = path.join(basePath, currentDir);
  if(fs.existsSync(currentPath)) {
    checkVueFileIsexists(currentPath, filename);
  } else {
    fs.mkdirSync(currentPath);
    checkVueFileIsexists(currentPath, filename);
  }
}

function checkVueFileIsexists(currentPath, filename) {
  if(Object.prototype.toString.call(filename) === '[object Array]') {
    filename.forEach(function(onefile) {
      onefile = variableNameConversion(onefile);
      let file = path.join(currentPath, './' + onefile);
      generateVueFile(file, onefile);
    })
  } else {
    filename = variableNameConversion(filename);
    let file = path.join(currentPath, './' + filename);
    generateVueFile(file, filename);
  }
}

function variableNameConversion(filename) {
  if(program.PascalCase) {
    filename = filename.replace(/\-(\w)/g, function(all, letter){
                return letter.toUpperCase();
              });
    filename = filename.substring(0, 1).toUpperCase() + filename.substring(1);
  } else {
    filename = filename.substring(0, 1).toLowerCase() + filename.substring(1);
    filename = filename.replace(/([A-Z])/g,"-$1").toLowerCase();
  }
  return filename;
}

function generateClassName(filename) {
  filename = filename.substring(0, 1).toLowerCase() + filename.substring(1);
  return filename = filename.replace(/([A-Z])/g,"-$1").toLowerCase();
}

function generateVueFile(file, filename) {
  console.log('');
  let currentPath = program.CSS ? (path.join(file, './' + filename)) : (file + suffix);
  let currentDir = program.CSS ? file : (file + suffix);
  let showFileName = program.CSS ? filename : filename + suffix;
  spinner.start(showFileName + ' is generating......');
  if(fs.existsSync(currentDir)) {
    spinner.fail(chalk.red(showFileName + ' exists.'));
  } else {
    if(program.CSS) {
      fs.mkdirSync(file);
      fs.writeFileSync(currentPath + suffix, generateTemplate(filename));
      fs.writeFileSync(currentPath + '.css', generateCssTemplate(filename));
    } else {
      fs.writeFileSync(currentPath, generateTemplate(filename));
    }
    spinner.succeed(showFileName + ' generated successfully');
  }
}

function generate() {
  if (program.args.length === 1) {
    checkPathIsexists('./components', program.args[0]);
  } else if(program.args.length === 2) {
    checkPathIsexists(program.args[0], program.args[1]);
  } else {
    checkPathIsexists(program.args.shift(), program.args);
  }
  console.log('');
  spinner.stop();
}

function generateTemplate(filename) {
  return  `<template>\n  <div class="${generateClassName(filename)}"></div>\n</template>\n\n`
          + `<script>\nexport default {\n  name: '${filename}',\n  data () {\n    return {\n\n    }\n  },\n  created () {},\n  mounted () {},\n  methods: {}\n}\n</script>\n\n`
          + `<style scoped>\n.${generateClassName(filename)} {\n\n}\n</style>\n`;
}

function generateCssTemplate(filename) {
  return  `.${generateClassName(filename)} {\n\n}`;
}
